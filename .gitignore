# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

# C extensions
*.so
*.dll
*.dylib

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.envrc
.env.local
.env.development
.env.test
.env.production
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/
*.iml
*.iws
*.ipr
out/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
.vscode/
*.code-workspace

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/

# Operating System Files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
Desktop.ini

# Temporary files
*.tmp
*.temp
*.swp
*.swo
*~
.#*
#*#

# Backup files
*.bak
*.backup
*.orig
*.rej

# Archive files
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Compiled source
*.com
*.class
*.exe
*.o
*.so

# Logs and databases
*.log
*.sql
*.sqlite
*.db

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Node.js (in case the project uses any Node tools)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.yarn-integrity

# Configuration files with sensitive data
config.ini
config.yaml
config.yml
secrets.json
credentials.json
.secrets
.credentials

# Model files and large data files
*.h5
*.hdf5
*.pkl
*.pickle
*.joblib
*.model
*.weights
*.pt
*.pth
*.ckpt
*.safetensors

# Data files
*.csv
*.tsv
*.parquet
*.feather
*.xlsx
*.xls
*.npy
*.npz

# Image files (if not essential to the project)
*.jpg
*.jpeg
*.png
*.gif
*.bmp
*.tiff
*.svg
*.ico

# Video files
*.mp4
*.avi
*.mov
*.wmv
*.flv
*.webm

# Audio files
*.mp3
*.wav
*.flac
*.aac
*.ogg

# Document files (if auto-generated)
*.pdf
*.doc
*.docx
*.ppt
*.pptx
*.txt
*.json
*.jsonl

# IDE and editor files
.sublime-project
.sublime-workspace
*.sublime-project
*.sublime-workspace
.atom/
.brackets.json
*.code-workspace

# Git internals
.git/
.gitconfig
.gitmodules

# Docker
.dockerignore
docker-compose.override.yml

# Kubernetes
*.kubeconfig

# Terraform
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl

# AWS
.aws/

# Google Cloud
.gcloud/
.gsutil/

# Azure
.azure/

# Monitoring and profiling
.prof
*.pprof
.monitor/

# Cache directories
.cache/
.temp/
.tmp/
cache/
tmp/

# Build artifacts
build/
dist/
out/
target/
bin/

# Security scanners
.bandit
.safety

# Linting and formatting
.flake8
.pylint.d/
.black
.isort.cfg

# Documentation builds
docs/build/
site/
_site/

# Misc
.vagrant/
Vagrantfile.local
.sass-cache/
connect.lock
coverage/
libpeerconnection.log
testem.log
typings/

# Project specific files
scripts.py
uv.lock
.python-version
pyproject.toml

# Data directories and files - EXCLUDE ALL DATA FROM GIT
data/
training_data/
output/
outputs/
results/
graphs/
processed/
raw_data/
extracted/
features/
models/
checkpoints/
logs/

# PDF files and document data
*.pdf
*.doc
*.docx
*.ppt
*.pptx
*.txt
*.json
*.jsonl

# Model and training files
*.pt
*.pth
*.h5
*.hdf5
*.pkl
*.pickle
*.joblib
*.model
*.weights
*.ckpt
*.safetensors

# CSV and data files
*.csv
*.tsv
*.parquet
*.feather
*.xlsx
*.xls
*.npy
*.npz

# Annotation and label files
*_annotations.json
*_features.json
*_processed.json
*_labels.json
*_mappings.json

# Graph and tensor files
*_graph.pt
*_graphs.pt
*_tensors.pt
combined_*.pt

# Training logs and outputs
training_logs/
tensorboard_logs/
wandb/
mlruns/

# Temporary processing files
temp/
tmp/
cache/
.cache/

# Large datasets
datasets/
corpus/
documents/
pdfs/
images/

*.bat
install_pytorch.py
training_data_old/
__init__.py
experiments/
optimized_models/
Test_data/
testing/
training_data_old/
quick_test.py
retrain_with_class_weights.py
train_balanced_model_v3.py
train_calibrated_model_v6.py
train_improved_model_v7.py
train_optimal_model_v4.py
train_optimal_model_v5.py
train_revolutionary_model_v7.py
training_example.py
view_graphs.py
test_dataset.py